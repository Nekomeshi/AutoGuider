# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.5 on Sun May 10 20:22:31 2015

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade

import commands
import Preview
import Capture
import RPi.GPIO as GPIO
import PiTFT28Ctrl
import V4L2Ctrl
import GuideCtrl
import AutoGuideCtrl
import BitmapToggleButton
import AutoGuideSetup
import shelve


class AutoGuideFrame(wx.Frame):
    __SETTING_NAME = "AutoGuideFrameSetting"
    __is2Axis = True
    __AXISNUM = "AXISNUM"
    __autoGuide = None

    def __loadSetup(self):
        
        savedData = shelve.open(self.__SETTING_NAME)
        try:
            self.__is2Axis = savedData[self.__AXISNUM]
        except:
            self.__is2Axis = True

        savedData.close()

    def __init__(self, *args, **kwds):
        # begin wxGlade: AutoGuideFrame.__init__
        self.__loadSetup()
        
        kwds["style"] = wx.NO_BORDER
        wx.Frame.__init__(self, *args, **kwds)
        self.btnPreview = BitmapToggleButton.BitmapToggleButton(self, -1, 
                                            wx.Bitmap("cam_on.png"), 
                                            wx.Bitmap("cam_off.png"))
        self.btnOriCalib = wx.BitmapButton(self, -1, wx.Bitmap("calib.png"))
        self.btnGuideStart = wx.BitmapButton(self, -1, wx.Bitmap("autoguide.png"))
        self.btnZoom = wx.BitmapButton(self, -1, wx.Bitmap("zoom.png"))
#        self.btnTmp2 = wx.Button(self, -1, "")#spair
        self.btnTmp1 = wx.Button(self, -1, "")#spair
        
        self.labelDuty = wx.StaticText(self, -1, "Duty:")        
        self.labelDutyRa = wx.StaticText(self, -1, "Ra:")        
        self.labelDutyDec = wx.StaticText(self, -1, "Dec:")        
        
        
        self.btnAxis = wx.ToggleButton(self, -1, "2ax")
        self.labelReady = wx.StaticText(self, -1, "Ready")        
        
        self.windowPreview = Preview.Preview(self, wx.ID_ANY)        

        self.btnGuideCtrl = wx.BitmapButton(self, -1, wx.Bitmap("guide.png"))
        self.btnGainCtrl = wx.Button(self, -1, "Gn")
        self.btnExposureCtrl = wx.Button(self, -1, "Exp")
        self.btnBrightnessCtrl = wx.Button(self, -1, "Bri")
        self.btnTmp4 = wx.Button(self, -1, "")#spair
        self.btnSetup = wx.BitmapButton(self, -1, wx.Bitmap("setup.png"))
        self.btnQuit = wx.BitmapButton(self, -1, wx.Bitmap("exit.png"))
        self.labelImput = wx.StaticText(self, -1, "RPi")        

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
    
        self.__setupPiTFTGPIO()
        self.__setupGuideCtrl()
        self.__showInputSelect(self.__guideCtrl.isInputRPi())
        self.__V4L2Ctrl = V4L2Ctrl.V4L2Ctl() 
        self.__autoGuideSetup = AutoGuideSetup.AutoGuideSetup(self.__V4L2Ctrl)


        self.__do_bind()

        btns ={
            AutoGuideCtrl.BTN_START_CAMERA:self.btnPreview,
            AutoGuideCtrl.BTN_START_CALIB:self.btnOriCalib,
            AutoGuideCtrl.BTN_START_GUIDE:self.btnGuideStart,
            AutoGuideCtrl.BTN_ZOOM:self.btnZoom,
            AutoGuideCtrl.BTN_AXIS:self.btnAxis,
            AutoGuideCtrl.BTN_GUIDE_CTRL:self.btnGuideCtrl,
            AutoGuideCtrl.LBL_GUIDE_READY:self.labelReady,
            AutoGuideCtrl.LBL_DUTY_AUTO:self.labelDuty,
            AutoGuideCtrl.LBL_DUTY_RA:self.labelDutyRa,
            AutoGuideCtrl.LBL_DUTY_DEC:self.labelDutyDec
        }
        self.__autoGuide = AutoGuideCtrl.AutoGuideCtrl(self, 
                                                        self.__guideCtrl,
                                                        self.__V4L2Ctrl,
                                                        self.windowPreview,
                                                        btns)
        
        


        
    def __del__(self):
        print("Deleted AutoGuideFrame")
        del self.__guideCtrl
        del self.__lcdCtrl
        del self.__V4L2Ctrl
        del self.windowPreview
        self.__autoGuide.stopCapture()
        del self.__autoGuide
        GPIO.cleanup()
        
    def __set_properties(self):
        # begin wxGlade: AutoGuideFrame.__set_properties
        self.SetTitle("frame_1")
        self.SetSize((320, 240))
        self.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.btnPreview.SetMinSize((32, 32))
        self.btnPreview.SetBackgroundColour(wx.Colour(0, 0, 0))
        
        self.btnOriCalib.SetMinSize((32, 32))
        self.btnOriCalib.SetBackgroundColour(wx.Colour(0, 0, 0))
        
        self.btnGuideStart.SetMinSize((32, 32))
        self.btnGuideStart.SetBackgroundColour(wx.Colour(0, 0, 0))
        
        self.btnZoom.SetMinSize((32, 32))
        self.btnZoom.SetBackgroundColour(wx.Colour(0, 0, 0))
#        self.btnTmp2.SetMinSize((32, 32))
#        self.btnTmp2.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.btnTmp1.SetMinSize((32, 32))
        self.btnTmp1.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.labelDuty.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.labelDuty.SetForegroundColour(wx.Colour(255, 255, 255))
        self.labelDuty.SetFont(wx.Font(6, wx.DEFAULT, wx.NORMAL, wx.LIGHT, 0, "Roboto"))
        self.labelDutyRa.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.labelDutyRa.SetForegroundColour(wx.Colour(255, 255, 255))
        self.labelDutyRa.SetFont(wx.Font(6, wx.DEFAULT, wx.NORMAL, wx.LIGHT, 0, "Roboto"))
        self.labelDutyDec.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.labelDutyDec.SetForegroundColour(wx.Colour(255, 255, 255))
        self.labelDutyDec.SetFont(wx.Font(6, wx.DEFAULT, wx.NORMAL, wx.LIGHT, 0, "Roboto"))
        self.__setDutyLabel(-1, -1)
        
        self.btnAxis.SetMinSize((32, 32))
        self.btnAxis.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.btnAxis.SetForegroundColour(wx.Colour(255, 255, 255))
        self.btnAxis.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.LIGHT, 0, "Roboto"))
        self.btnAxis.SetValue(self.__is2Axis)
        self.__setAxisLabel()

        self.labelReady.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.labelReady.SetForegroundColour(wx.Colour(0, 255, 0))
        self.labelReady.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.LIGHT, 0, "Roboto"))



        self.windowPreview.SetMinSize((240,240))
        self.windowPreview.SetBackgroundColour(wx.Colour(0, 0, 0))
        
        self.btnGuideCtrl.SetMinSize((32, 32))
        self.btnGuideCtrl.SetBackgroundColour(wx.Colour(0, 0, 0))
        
        self.btnGainCtrl.SetMinSize((32, 32))
        self.btnGainCtrl.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.btnGainCtrl.SetForegroundColour(wx.Colour(255, 255, 255))
        self.btnGainCtrl.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.LIGHT, 0, "Roboto"))

        self.btnExposureCtrl.SetMinSize((32, 32))
        self.btnExposureCtrl.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.btnExposureCtrl.SetForegroundColour(wx.Colour(255, 255, 255))
        self.btnExposureCtrl.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.LIGHT, 0, "Roboto"))
        
        self.btnBrightnessCtrl.SetMinSize((32, 32))
        self.btnBrightnessCtrl.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.btnBrightnessCtrl.SetForegroundColour(wx.Colour(255, 255, 255))
        self.btnBrightnessCtrl.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.LIGHT, 0, "Roboto"))
        
        self.btnTmp4.SetMinSize((32, 32))
        self.btnTmp4.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.btnSetup.SetMinSize((32, 32))
        self.btnSetup.SetBackgroundColour(wx.Colour(0, 0, 0))
        
        self.btnQuit.SetMinSize((32, 32))
        self.btnQuit.SetBackgroundColour(wx.Colour(0, 0, 0))
        
        self.labelImput.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.labelImput.SetForegroundColour(wx.Colour(0, 255, 0))
        self.labelImput.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.LIGHT, 0, "Roboto"))

        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: AutoGuideFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_3.Add(self.btnPreview, 0, 0, 0)
        sizer_3.Add(self.btnOriCalib, 0, 0, 0)
        sizer_3.Add(self.btnGuideStart, 0, 0, 0)
#        sizer_3.Add(self.btnTmp2, 0, 0, 0)
        sizer_3.Add(self.btnTmp1, 0, 0, 0)
        sizer_3.Add(self.labelDuty, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3.Add(self.labelDutyRa, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3.Add(self.labelDutyDec, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_3.Add(self.btnZoom, 0, 0, 0)
        sizer_3.Add(self.btnAxis, 0, 0, 0)
        sizer_3.Add(self.labelReady, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        
        
        sizer_2.Add(sizer_3, 1, wx.SHAPED, 0)
        sizer_2.Add(self.windowPreview, 8, wx.EXPAND, 0)
        sizer_4.Add(self.btnGuideCtrl, 0, 0, 0)
        sizer_4.Add(self.btnGainCtrl, 0, 0, 0)
        sizer_4.Add(self.btnExposureCtrl, 0, 0, 0)
        sizer_4.Add(self.btnBrightnessCtrl, 0, 0, 0)
        sizer_4.Add(self.btnTmp4, 0, 0, 0)
        sizer_4.Add(self.btnSetup, 0, 0, 0)
        sizer_4.Add(self.btnQuit, 0, 0, 0)
        sizer_4.Add(self.labelImput, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(sizer_4, 1, wx.EXPAND | wx.ALIGN_RIGHT, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade
        
    def __do_bind(self):
        self.btnQuit.Bind(wx.EVT_BUTTON, self.__quitFrame)
        self.btnGuideCtrl.Bind(wx.EVT_BUTTON, self.__showGuideCtrler)
        
        self.btnGainCtrl.Bind(wx.EVT_BUTTON, self.__showV4L2GainCtrl)
        self.btnExposureCtrl.Bind(wx.EVT_BUTTON, self.__showV4L2ExposureCtrl)
        self.btnBrightnessCtrl.Bind(wx.EVT_BUTTON, self.__showV4L2BrightnessCtrl)
        self.btnAxis.Bind(wx.EVT_TOGGLEBUTTON, self.__onAxisChanged)
        self.btnSetup.Bind(wx.EVT_BUTTON, self.__onClickedSetup)
        

    def __quitFrame(self, event):
        dlg = wx.MessageDialog(self, 
                                "Are you sure to quit?", 
                                "Question", 
                                wx.YES_NO | wx.NO_DEFAULT | wx.ICON_QUESTION)
        if dlg.ShowModal() == wx.ID_YES:
            self.Close(True)
    def __onClickedSetup(self, event):
        if self.__autoGuideSetup.showDialog(self) == wx.ID_OK:
            self.__setDutyLabel(-1,-1)

    #2ax 1ax label
    def __onAxisChanged(self, event):
        self.__is2Axis = self.btnAxis.GetValue()
        savedData = shelve.open(self.__SETTING_NAME)
        savedData[self.__AXISNUM] = self.__is2Axis
        savedData.close()
        self.__setAxisLabel()

    def __setDutyLabel(self, raDefVal, decDefVal):
        dutyRa = AutoGuideSetup.dutyRa
        dutyDec = AutoGuideSetup.dutyDec
        if AutoGuideSetup.isDutyAuto:
            self.labelDuty.SetLabel("Duty:A")
            if self.__autoGuide == None:
                dutyRa = -1
                dutyDec = -1
            else:
                dutyRa, dutyDec = self.__autoGuide.getGuideDuty()
        else:
            self.labelDuty.SetLabel("Duty:M")        
            
        self.labelDutyRa.SetLabel("Ra:" + str(dutyRa))        
        self.labelDutyDec.SetLabel("Dec:" + str(dutyDec))

    def __setAxisLabel(self):
        if self.__is2Axis:
            self.btnAxis.SetLabel("2ax")
        else:
            self.btnAxis.SetLabel("1ax")
            
    #V4L2
    def __showV4L2GainCtrl(self, event):
        self.__V4L2Ctrl.setCtrlValueUI(self, self.__V4L2Ctrl.CTRL_GAIN)
    def __showV4L2ExposureCtrl(self, event):
        self.__V4L2Ctrl.setCtrlValueUI(self, self.__V4L2Ctrl.CTRL_EXPOSURE_ABSOLUTE)
    def __showV4L2BrightnessCtrl(self, event):
        self.__V4L2Ctrl.setCtrlValueUI(self, self.__V4L2Ctrl.CTRL_BRIGHTNESS)

    #GuideCtrl
    def __showGuideCtrler(self, event):
        self.__guideCtrl.showGuideController(self)

    def __showInputSelect(self, isRPi):
        if isRPi:
            wx.CallAfter(self.labelImput.SetLabel, "RPi")        
            wx.CallAfter(self.labelImput.SetForegroundColour, wx.Colour(255, 0, 0))
        else:
            wx.CallAfter(self.labelImput.SetLabel, "Cnt")        
            wx.CallAfter(self.labelImput.SetForegroundColour, wx.Colour(0, 255, 0))
            
    def __onInputChanged(self, channnel):
        ip = self.__guideCtrl.isInputRPi()
        print("input RPi ?:{}".format(ip))
        self.__showInputSelect(ip)
                
    def __setupGuideCtrl(self):
        self.__guideCtrl = GuideCtrl.GuideCtrl(AutoGuideSetup.pwmFreq, self.__onInputChanged)
        



    def __callbackGPIO18(self, event):
        self.__lcdCtrl.backlight(not self.__lcdCtrl.isBacklightOn())
        print("GPIO 18")
    def __callbackGPIO22(self, event):
        print("GPIO 22")
        
    def __confirmAndShutdown(self):
        dlg = wx.MessageDialog(self, 
                                "Are you sure to shutdown?", 
                                "Question", 
                                wx.YES_NO | wx.NO_DEFAULT | wx.ICON_QUESTION)
        if dlg.ShowModal() == wx.ID_YES:
            cmdLine = "sudo shutdown -h now"
            parmStr = commands.getoutput(cmdLine);
    def __callbackGPIO23(self, event):
        print("GPIO 23")
        wx.CallAfter(self.__confirmAndShutdown)

        
    def __callbackGPIO27(self, event):
        print("GPIO 27")

    def __setupPiTFTGPIO(self):
        lcdCtrl = PiTFT28Ctrl.PiTFT28Ctrl()
        lcdCtrl.setGPIO18Callback(callback = self.__callbackGPIO18, 
                            init_state = GPIO.PUD_UP, 
                            trigger = GPIO.RISING)
        lcdCtrl.setGPIO22Callback(callback = self.__callbackGPIO22, 
                            init_state = GPIO.PUD_UP, 
                            trigger = GPIO.RISING)
        lcdCtrl.setGPIO23Callback(callback = self.__callbackGPIO23, 
                            init_state = GPIO.PUD_UP, 
                            trigger = GPIO.RISING)
        lcdCtrl.setGPIO27Callback(callback = self.__callbackGPIO27, 
                            init_state = GPIO.PUD_UP, 
                            trigger = GPIO.RISING)
        self.__lcdCtrl = lcdCtrl



# end of class AutoGuideFrame
